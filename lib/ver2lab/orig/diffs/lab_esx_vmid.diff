Index: remote_esx_controller.rb
===================================================================
--- remote_esx_controller.rb	(revision 13291)
+++ remote_esx_controller.rb	(working copy)
 	
+	def self.resolve_datastore(user,host,datastore='[datastore1]')
+		datastore.gsub!(/\[/,'').gsub!(/\]/,'')
+		remote_cmd = "ssh #{user}@#{host} \"#{VIM_CMD} hostsvc/datastore/info #{datastore} | grep path\""
+		puts "DEBUG:  Running #{remote_cmd}"
+		raw = `#{remote_cmd}`
+		if raw =~ /Datastore not found/ or raw.empty?
+			raise "#{basepath} not recognized by the server as a valid datastore"
+			return nil
+		else
+			# path = "/vmfs/volumes/uuid"
+			return raw.split('"')[1].to_s
+		end
+	end
+end
 	
 end
 end
Index: remote_esx_driver.rb
===================================================================
--- remote_esx_driver.rb	(revision 13291)
+++ remote_esx_driver.rb	(working copy)
@@ -15,12 +15,16 @@
 
 	attr_accessor :location # among other things
 
-	def initialize(vmid, location, os=nil, tools=false, user=nil, host=nil, credentials=nil)
+	def initialize(vmid, esx_vmid=nil, location=nil, os=nil, tools=false, user=nil, host=nil, credentials=nil)
 
 		unless user then raise ArgumentError, "Must provide a username" end
 		unless host then raise ArgumentError, "Must provide a hostname" end
+		if not esx_vmid and not location
+			then raise ArgumentError, "Must provide an esx_vmid or a location"
+		end
 
 		@vmid = filter_command(vmid)
+		@esx_vmid = filter_id(esx_vmid)
 		@location = filter_command(location)
 		@user = filter_command(user)
 		@host = filter_command(host)
@@ -37,27 +41,27 @@
 	end
 
 	def start
-		system_command("ssh #{@user}@#{@host} \"vim-cmd vmsvc/power.on #{@vmid}\"")
+		system_command("ssh #{@user}@#{@host} \"vim-cmd vmsvc/power.on #{@esx_vmid}\"")
 	end
 
 	def stop
-		system_command("ssh #{@user}@#{@host} \"vim-cmd vmsvc/power.off #{@vmid}\"")
+		system_command("ssh #{@user}@#{@host} \"vim-cmd vmsvc/power.off #{@esx_vmid}\"")
 	end
 
 	def suspend
-		system_command("ssh #{@user}@#{@host} \"vim-cmd vmsvc/power.suspend #{@vmid}\"")
+		system_command("ssh #{@user}@#{@host} \"vim-cmd vmsvc/power.suspend #{@esx_vmid}\"")
 	end
 
 	def pause 	# no concept of pause?
-		system_command("ssh #{@user}@#{@host} \"vim-cmd vmsvc/power.suspend #{@vmid}\"")
+		system_command("ssh #{@user}@#{@host} \"vim-cmd vmsvc/power.suspend #{@esx_vmid}\"")
 	end
 
 	def resume
-		system_command("ssh #{@user}@#{@host} \"vim-cmd vmsvc/power.suspendResume #{@vmid}\"")
+		system_command("ssh #{@user}@#{@host} \"vim-cmd vmsvc/power.suspendResume #{@esx_vmid}\"")
 	end
 
 	def reset
-		system_command("ssh #{@user}@#{@host} \"vim-cmd vmsvc/power.reset #{@vmid}\"")
+		system_command("ssh #{@user}@#{@host} \"vim-cmd vmsvc/power.reset #{@esx_vmid}\"")
 	end
 
 	def create_snapshot(snapshot)
@@ -66,7 +70,7 @@
 		#vmware-vim-cmd vmsvc/snapshot.create [vmid: int] [snapshotName: string] 
 		#			[snapshotDescription: string] [includeMemory:bool]
 
-		system_command("ssh #{@user}@#{@host} \"vim-cmd vmsvc/snapshot.create #{@vmid} #{snapshot} \'lab created snapshot\' 1 true\"")
+		system_command("ssh #{@user}@#{@host} \"vim-cmd vmsvc/snapshot.create #{@esx_vmid} #{snapshot} \'lab created snapshot\' 1 true\"")
 	end
 
 	def revert_snapshot(snapshot)
@@ -76,14 +80,14 @@
 		# not sure how we can do this, would have to list snapshots and map name to level & index
 
 		#snapshot = filter_input(snapshot)
-		#system_command("ssh #{@user}@#{@host} \"vim-cmd vmsvc/snapshot.revert #{@vmid} 0 0\"")
+		#system_command("ssh #{@user}@#{@host} \"vim-cmd vmsvc/snapshot.revert #{@esx_vmid} 0 0\"")
 	end
 
 	def delete_snapshot(snapshot)
 		raise "Not Implemented"
 
 		#snapshot = filter_input(snapshot)
-		#system_command("ssh #{@user}@#{@host} \"vim-cmd vmsvc/snapshot.remove #{@vmid} true 0 0\"")
+		#system_command("ssh #{@user}@#{@host} \"vim-cmd vmsvc/snapshot.remove #{@esx_vmid} true 0 0\"")
 	end
 	
 	def run_command(command)
@@ -111,7 +115,7 @@
 	end
 
 	def running?
-		power_status_string = `ssh #{@user}@#{@host} \"vim-cmd vmsvc/power.getstate #{@vmid}\"`
+		power_status_string = `ssh #{@user}@#{@host} \"vim-cmd vmsvc/power.getstate #{@esx_vmid}\"`
 		return true if power_status_string =~ /Powered on/
 	false
 	end
Index: vm_controller.rb
===================================================================
--- vm_controller.rb	(revision 13291)
+++ vm_controller.rb	(working copy)
@@ -64,8 +64,8 @@
 			return nil
 		end
 
-		def add_vm(vmid, type,location,credentials=nil,user=nil,host=nil)			
-			@vms << Vm.new( {	'vmid' => vmid, 
+		def add_vm(vmid,type,location,credentials=nil,user=nil,host=nil)			
+			@vms << Vm.new( {	'vmid' => vmid,
 						'driver' => type, 
 						'location' => location, 
 						'credentials' => credentials,
@@ -86,7 +86,7 @@
 			vms.each do |item|
 				begin
 					vm = Vm.new(item)
-					@vms << vm unless includes_vmid? vm.vmid
+					@vms << vm unless includes_vmid?(vm.vmid)
 				rescue Exception => e
 					# TODO -  this needs to go into a logfile and be raised up to an interface.
 					puts "Invalid VM definition"
@@ -201,6 +201,7 @@
 					
 					vm_list.each do |item|
 						@vms << Vm.new( {	'vmid' => "#{item[:id]}",
+									# 'esx_vmid' => ??,
 									'name' => "#{item[:name]}",
 									'driver' => driver_type, 
 									'user' => user,
Index: vm_driver.rb
===================================================================
--- vm_driver.rb	(revision 13291)
+++ vm_driver.rb	(working copy)
@@ -153,10 +153,18 @@
 		if !(string =~ /^[\w\s\[\]\{\}\/\\\.\-\"\(\)]*$/)
 			raise "WARNING! Invalid character in: #{string}"
 		end
-
 	string
 	end
 	
+	def filter_id(str_or_int)
+		return "" unless str_or_int
+		
+		if !(str_or_int.to_s =~ /^[0-9]+$/)  #nothing but numbers
+			raise "WARNING! Invalid character in: #{str_or_int}, should only be numbers"
+		end
+	str_or_int
+	end
+	
 	def system_command(command)
 		begin
 			system(command)
Index: vm.rb
===================================================================
--- vm.rb	(revision 13291)
+++ vm.rb	(working copy)
@@ -16,6 +16,7 @@
 class Vm
 	
 	attr_accessor :vmid
+	attr_accessor :esx_vmid
 	attr_accessor :name
 	attr_accessor :descripition
 	attr_accessor :location
@@ -30,6 +31,7 @@
 
 	## Initialize takes a vm configuration hash of the form
 	##  - vmid (unique identifier)
+	##    esx_vmid (id given to vm by esx/esxi if applicable, esx_vmid or location must be provided)
 	##    driver (vm technology)
 	##    user (if applicable - remote system)
 	##    host (if applicable - remote system)
@@ -59,10 +61,15 @@
 	
 		# Optional for virtualbox
 		@location = filter_input(config['location'])
+		
+		# Optional for remote_esx, but must have either esxi_vmid or location
+		@esx_vmid = config['esx_vmid'] || "0"
 

@@ -81,7 +88,7 @@
 		elsif @driver_type == "dynagen"
 			@driver = Lab::Drivers::DynagenDriver.new(@vmid, @location,@platform)	
 		elsif @driver_type == "remote_esx"
-			@driver = Lab::Drivers::RemoteEsxDriver.new(@vmid, @location, @os, @tools, @user, @host, @credentials)
+			@driver = Lab::Drivers::RemoteEsxDriver.new(@vmid, @esx_vmid, @location, @os, @tools, @user, @host, @credentials)
 		#elsif @driver_type == "qemu"
 		#	@driver = Lab::Drivers::QemuDriver.new	
 		#elsif @driver_type == "qemudo"
@@ -210,5 +217,13 @@
 
 		string
 	end
+	def filter_id(str_or_int)
+		return "" unless str_or_int
+		
+		if !(str_or_int.to_s =~ /^[0-9]+$/)  #nothing but numbers
+			raise "WARNING! Invalid character in: #{str_or_int}, should only be numbers"
+		end
+	str_or_int
+	end
 end
 end
